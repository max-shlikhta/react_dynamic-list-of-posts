{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.ts","components/NewCommentForm/NewCommentForm.tsx","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["request","endpoint","options","fetch","then","response","json","Error","status","statusText","PostsList","selectedUserId","onSelect","selectedPostId","useState","posts","setPosts","useEffect","userId","getUserPosts","loadedPosts","className","length","map","title","id","type","onClick","NewCommentForm","onAdd","postId","name","email","body","newComment","setNewComment","handleInput","event","value","target","uuidv4","onSubmit","preventDefault","method","headers","JSON","stringify","addComment","placeholder","onChange","required","PostDetails","postDetails","setPostDetails","isVisibleComments","setIsVisibleComments","postComments","setPostComments","fetchDetails","details","fetchComments","comments","Promise","all","removeComment","commentId","deleteComment","deletedComment","filter","comment","hidden","App","users","setUsers","setSelectedUserId","setSelectedPostId","usersFromServer","selectPostId","useCallback","String","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.012c860d.chunk.js","sourcesContent":["export const API_URL = 'https://mate.academy/students-api';\n\nexport const request = (\n  endpoint: string,\n  options?: RequestInit | undefined,\n) => {\n  return fetch(`${API_URL}/${endpoint}`, options)\n    .then(response => response.json())\n    .then(response => {\n      if (response.Error) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response;\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUserPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport './PostsList.scss';\n\ninterface Props {\n  selectedUserId: number;\n  onSelect: (postId: number) => void;\n  selectedPostId: number;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId, onSelect, selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    const loadPosts = () => {\n      getUserPosts(selectedUserId)\n        .then(loadedPosts => setPosts(loadedPosts));\n    };\n\n    loadPosts();\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {posts.length\n        ? (\n          <ul className=\"PostsList__list\">\n            {posts.map(({ title, userId, id }) => (\n              <li\n                className=\"PostsList__item\"\n                key={id}\n              >\n                <div>\n                  <b>\n                    {`[User #${userId}]: `}\n                  </b>\n                  {title}\n                </div>\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={id !== selectedPostId\n                    ? () => onSelect(id)\n                    : () => onSelect(0)}\n                >\n                  {\n                    id !== selectedPostId\n                      ? <p>Open &#9658;</p>\n                      : <p>Close &#9668;</p>\n                  }\n                </button>\n              </li>\n            ))}\n          </ul>\n        )\n        : (\n          <p>Not posts yet</p>\n        )}\n    </div>\n  );\n};\n","import { request } from './api';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number): Promise<Post[]> => {\n  let response;\n\n  if (!userId) {\n    response = 'posts';\n  } else {\n    response = `posts?userId=${userId}`;\n  }\n\n  return request(response);\n};\n\nexport const getPostDetails = (postId: number): Promise<Post> => {\n  return request(`posts/${postId}`);\n};\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { addComment } from '../../api/comments';\nimport { Comment } from '../../types/Comment';\nimport './NewCommentForm.scss';\n\ninterface Props {\n  onAdd: (comment: Comment) => void,\n  postId: number,\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ onAdd, postId }) => {\n  const [newComment, setNewComment] = useState({\n    id: '',\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const {\n    id, name, email, body,\n  } = newComment;\n\n  const handleInput = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { value } = event.target;\n\n    switch (event.target.name) {\n      case 'id':\n        setNewComment({\n          id: uuidv4(),\n          name,\n          email,\n          body,\n        });\n        break;\n\n      case 'name':\n        setNewComment({\n          id,\n          name: value,\n          email,\n          body,\n        });\n        break;\n\n      case 'email':\n        setNewComment({\n          id,\n          name,\n          email: value,\n          body,\n        });\n        break;\n\n      case 'body':\n        setNewComment({\n          id,\n          name,\n          email,\n          body: value,\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const resetForm = () => {\n    setNewComment({\n      id: '',\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment(id, postId, name, email, body)\n      .then((response: Comment) => {\n        onAdd(response);\n      });\n\n    resetForm();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={handleInput}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={handleInput}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={handleInput}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { request } from './api';\n\nexport const getPostComments = (postId: number): Promise<Comment[]> => {\n  return request(`comments?postId=${postId}`);\n};\n\nexport const addComment = (\n  id: string,\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n) => (\n  request('comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      id,\n      postId,\n      name,\n      email,\n      body,\n    }),\n  })\n);\n\nexport const deleteComment = (commentId: string) => {\n  return request(`comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPostComments, deleteComment } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ninterface Props {\n  selectedPostId: number;\n}\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [isVisibleComments, setIsVisibleComments] = useState(true);\n  const [postComments, setPostComments] = useState <Comment[]>([]);\n\n  const fetchDetails = () => {\n    getPostDetails(selectedPostId)\n      .then(details => setPostDetails(details));\n  };\n\n  const fetchComments = () => {\n    getPostComments(selectedPostId)\n      .then(comments => setPostComments(comments));\n  };\n\n  useEffect(() => {\n    Promise.all([fetchDetails(), fetchComments()]);\n  }, [selectedPostId, isVisibleComments]);\n\n  const showComments = () => {\n    setIsVisibleComments(!isVisibleComments);\n  };\n\n  const addNewComment = (newComment: Comment) => {\n    setPostComments([\n      ...postComments,\n      newComment,\n    ]);\n  };\n\n  const removeComment = (commentId: string) => {\n    deleteComment(commentId)\n      .then(deletedComment => {\n        if (deletedComment) {\n          setPostComments(\n            postComments.filter(comment => comment.id !== commentId),\n          );\n        }\n      });\n  };\n\n  const { length } = postComments;\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {length\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              hidden={length < 1}\n              onClick={showComments}\n            >\n              {\n                `${isVisibleComments ? 'Hide' : 'Show'}\n                 ${length}\n                 ${length < 2 ? 'comment' : 'comments'}`\n              }\n            </button>\n          ) : (\n            <p\n              className=\"PostDetails__list-item\"\n            >\n              No comments yet. You can leave a comment first &#9660;\n            </p>\n          )}\n\n        {isVisibleComments\n          && (\n            <ul\n              className=\"PostDetails__list\"\n            >\n              {postComments.map(({ id, body }) => (\n                <li\n                  key={id}\n                  className=\"PostDetails__list-item\"\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__x\"\n                    onClick={() => removeComment(id)}\n                  >\n                    <p>&#10060;</p>\n                  </button>\n                  <p>\n                    {body}\n                  </p>\n                </li>\n              ))}\n            </ul>\n          )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            onAdd={addNewComment}\n            postId={selectedPostId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { getAllUsers } from './api/users';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { User } from './types/User';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getAllUsers()\n      .then(usersFromServer => setUsers(usersFromServer));\n  }, []);\n\n  const selectUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(Number(event.target.value));\n  };\n\n  const selectPostId = useCallback((postId: number) => {\n    setSelectedPostId(postId);\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={String(selectedUserId)}\n            onChange={selectUserId}\n          >\n            <option\n              key=\"0\"\n              value=\"0\"\n            >\n              all users\n            </option>\n\n            {users.map(({ id, name }) => (\n              <option\n                key={id}\n                value={id}\n              >\n                {name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            onSelect={selectPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? <PostDetails selectedPostId={selectedPostId} />\n            : <p>No post selected</p>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getAllUsers = () => {\n  return request('users');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}